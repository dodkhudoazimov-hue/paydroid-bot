from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import asyncio, random, datetime

TOKEN = "8238563485:AAHNLTZodPeXcl7YfjZqIqY6BpcPuP3QGXs"
ADMIN_IDS = [8377215874]

ITEMS = {
    1: {"name": "–§—É—Ç–±–æ–ª–∫–∞ Jazz", "price": 20, "desc": "–§—É—Ç–±–æ–ª–∫–∞–∏ —Å–∞–±—É–∫ –≤–∞ –∑–∞–º–æ–Ω–∞–≤”£ üéµ", "img": "tshirt.jpg"},
    2: {"name": "–ö–∞–ø—Å Jazz", "price": 12, "desc": "–ö–∞–ø—Å–∏ —É—Å–ª—É–±”£ –±–∞—Ä–æ–∏ “≥–∞—Ä —Ä”Ø–∑ üß¢", "img": "cap.jpg"},
    3: {"name": "–°—É–º–∫–∞ Jazz", "price": 25, "desc": "–°—É–º–∫–∞–∏ –±–æ—ç—ä—Ç–∏–º–æ–¥ –±–∞—Ä–æ–∏ —Å–∞—Ñ–∞—Ä üëú", "img": "bag.jpg"}
}

user_carts = {}
user_wishlist = {}
chat_sessions = {}
orders = []
all_users = set()

# ---------- –Å—Ä–¥–∞–º—á”£ ----------
async def send_typing(chat, text):
    await chat.send_chat_action("typing")
    await asyncio.sleep(0.5)
    await chat.send_message(text)

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    all_users.add(user_id)
    chat = update.message.chat
    await send_typing(chat, "üé∂ –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ **Jazz Store!**")
    buttons = [
        [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog"),
         InlineKeyboardButton("‚ù§Ô∏è –î–∏–ª—Ö–æ“≥“≥–æ", callback_data="open_wishlist")],
        [InlineKeyboardButton("üõí –°–∞–±–∞–¥", callback_data="open_cart"),
         InlineKeyboardButton("üí¨ –°—É“≥–±–∞—Ç –±–æ –∞–¥–º–∏–Ω", callback_data="chat_admin")],
        [InlineKeyboardButton("‚Ñπ –ú–∞—ä–ª—É–º–æ—Ç", callback_data="info")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([
            InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")
        ])
    await chat.send_message("–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –ö–∞—Ç–∞–ª–æ–≥ ----------
async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    for k, v in ITEMS.items():
        with open(v["img"], "rb") as photo:
            buttons = [[
                InlineKeyboardButton("‚ûï –ë–∞ —Å–∞–±–∞–¥", callback_data=f"add_{k}"),
                InlineKeyboardButton("‚ù§Ô∏è –î–∏–ª—Ö–æ“≥", callback_data=f"wish_{k}")
            ]]
            await query.message.reply_photo(photo=photo, caption=f"{v['name']} - ${v['price']}\n{v['desc']}", reply_markup=InlineKeyboardMarkup(buttons))
    back_buttons = [[InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")]]
    await query.message.reply_text("–ë–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(back_buttons))

# ---------- –ë–∞ —Å–∞–±–∞–¥ ----------
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    user_carts.setdefault(user_id, {})
    user_carts[user_id][item_id] = user_carts[user_id].get(item_id, 0) + 1
    await query.message.reply_text(f"‚úÖ {ITEMS[item_id]['name']} –±–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ —à—É–¥!")

# ---------- –ë–∞ –¥–∏–ª—Ö–æ“≥ ----------
async def add_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    user_wishlist.setdefault(user_id, set()).add(item_id)
    await query.message.reply_text(f"üíñ {ITEMS[item_id]['name']} –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ –¥–∏–ª—Ö–æ“≥“≥–æ –∏–ª–æ–≤–∞ —à—É–¥!")

# ---------- –î–∏–ª—Ö–æ“≥“≥–æ ----------
async def open_wishlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    items = user_wishlist.get(user_id, set())
    if not items:
        await query.message.reply_text("‚ù§Ô∏è –†”Ø–π—Ö–∞—Ç–∏ –¥–∏–ª—Ö–æ“≥“≥–æ —Ö–æ–ª–∏—Å—Ç.")
        return
    text = "‚ù§Ô∏è –ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥”Ø—Å—Ç–¥–æ—à—Ç–∞:\n"
    for i in items:
        text += f"- {ITEMS[i]['name']} (${ITEMS[i]['price']})\n"
    buttons = [[
        InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main"),
        InlineKeyboardButton("üõí –ë–∞ —Å–∞–±–∞–¥", callback_data="open_cart")
    ]]
    await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –°–∞–±–∞–¥ ----------
async def cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return
    text = "üõç –ú–∞“≥—Å—É–ª–æ—Ç–∏ —à—É–º–æ:\n"
    total = 0
    for item_id, qty in cart.items():
        subtotal = ITEMS[item_id]["price"] * qty
        total += subtotal
        text += f"- {ITEMS[item_id]['name']} x{qty} = ${subtotal}\n"
    text += f"\nüí∞ “≤–∞–º–∞–≥”£: ${total}"
    buttons = [[
        InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à –¥–æ–¥–∞–Ω", callback_data="checkout"),
        InlineKeyboardButton("üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω", callback_data="clear_cart")
    ],[
        InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")
    ]]
    await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Checkout ----------
async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    user_id = user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return
    total = sum(ITEMS[i]["price"] * q for i, q in cart.items())
    order_id = random.randint(10000, 99999)
    order_data = {
        "id": order_id,
        "user": user.username or user.first_name,
        "total": total,
        "items": cart,
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    orders.append(order_data)
    for admin in ADMIN_IDS:
        await context.bot.send_message(admin, f"üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤ ‚Ññ{order_id} –∞–∑ @{order_data['user']}\nüí∞ ${total}")
    await query.message.reply_text(f"‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ ‚Ññ{order_id} “õ–∞–±—É–ª —à—É–¥! üôå")

# ---------- –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–±–∞–¥ ----------
async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_carts[user_id] = {}
    await query.message.reply_text("üßπ –°–∞–±–∞–¥ —Ç–æ–∑–∞ —à—É–¥!")

# ---------- –ß–∞—Ç –±–æ –∞–¥–º–∏–Ω ----------
async def chat_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    chat_sessions[user.id] = True
    for admin in ADMIN_IDS:
        await context.bot.send_message(admin, f"üí¨ @{user.username or user.first_name} –º–µ—Ö–æ“≥–∞–¥ —Å”Ø“≥–±–∞—Ç –∫—É–Ω–∞–¥.")
    buttons = [[
        InlineKeyboardButton("üö´ “ö–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω", callback_data="stop_chat"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")
    ]]
    await query.message.reply_text("üó£ “≤–æ–ª–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –ø–∞—ë–º —Ñ–∏—Ä–∏—Å—Ç–µ–¥. –ë–∞—Ä–æ–∏ “õ–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω, —Ç—É–≥–º–∞—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Relay –ø–∞—ë–º“≥–æ ----------
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    if chat_sessions.get(user_id):
        if text.lower() == "—Å—Ç–æ–ø":
            chat_sessions[user_id] = False
            await update.message.reply_text("üö´ –°”Ø“≥–±–∞—Ç “õ–∞—Ç—ä —à—É–¥.")
            return
        for admin in ADMIN_IDS:
            await context.bot.send_message(admin, f"üë§ {update.message.from_user.first_name}: {text}")
        return
    if user_id in ADMIN_IDS and text.startswith("@"):
        parts = text.split(" ", 1)
        if len(parts) == 2:
            msg = parts[1]
            for u in chat_sessions.keys():
                await context.bot.send_message(u, f"üì© –ê–¥–º–∏–Ω: {msg}")
        return

# ---------- –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω ----------
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    buttons = [
        [InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à“≥–æ", callback_data="admin_orders"),
         InlineKeyboardButton("üìä –û–º–æ—Ä–∏ —É–º—É–º”£", callback_data="admin_stats")],
        [InlineKeyboardButton("üì® –ü–∞—ë–º –±–∞ “≥–∞–º–∞", callback_data="admin_broadcast"),
         InlineKeyboardButton("üßπ –ü–æ–∫—Å–æ–∑”£", callback_data="admin_clear")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")]
    ]
    await query.message.reply_text("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –ë–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é ----------
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        chat = query.message.chat
        buttons = [
            [InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog"),
             InlineKeyboardButton("‚ù§Ô∏è –î–∏–ª—Ö–æ“≥“≥–æ", callback_data="open_wishlist")],
            [InlineKeyboardButton("üõí –°–∞–±–∞–¥", callback_data="open_cart"),
             InlineKeyboardButton("üí¨ –°—É“≥–±–∞—Ç –±–æ –∞–¥–º–∏–Ω", callback_data="chat_admin")],
            [InlineKeyboardButton("‚Ñπ –ú–∞—ä–ª—É–º–æ—Ç", callback_data="info")]
        ]
        if user_id in ADMIN_IDS:
            buttons.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")])
        await chat.send_message("–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:", reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await start(update, context)

# ---------- Callback ----------
async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "open_catalog": await catalog(update, context)
    elif data.startswith("add_"): await add_item(update, context)
    elif data.startswith("wish_"): await add_wishlist(update, context)
    elif data == "open_wishlist": await open_wishlist(update, context)
    elif data == "open_cart": await cart(update, context)
    elif data == "clear_cart": await clear_cart(update, context)
    elif data == "checkout": await checkout(update, context)
    elif data == "chat_admin": await chat_admin(update, context)
    elif data == "stop_chat":
        chat_sessions[update.callback_query.from_user.id] = False
        await update.callback_query.message.reply_text("üö´ –°”Ø“≥–±–∞—Ç “õ–∞—Ç—ä —à—É–¥.")
    elif data == "info": await update.callback_query.message.reply_text("‚Ñπ Jazz Store ‚Äî –º–∞“ì–æ–∑–∞–∏ —Ä–∞—Å–º–∏–∏ Jazz üé∑")
    elif data == "admin_panel": await admin_panel(update, context)
    elif data == "back_main": await back_to_main(update, context)

# ---------- –°–æ—Ö—Ç–∞–Ω–∏ –±–æ—Ç ----------
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(buttons))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay))

print("‚úÖ Jazz Store (“≥–∞–º–∞ —Ç—É–≥–º–∞“≥–æ –¥–∞—Ä 2‚Äì3 —Å–∞—Ç—Ä) –æ–º–æ–¥–∞ –∞—Å—Ç!")
app.run_polling()
