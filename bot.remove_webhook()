from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import asyncio, random, datetime, json, os

# üîí TOKEN-–∏ —Ö—É–¥—Ä–æ –≥—É–∑–æ—Ä–µ–¥
TOKEN = "8238563485:AAHNLTZodPeXcl7YfjZqIqY6BpcPuP3QGXs"

# üëë ID-–∏ –∞–¥–º–∏–Ω
ADMIN_IDS = [8377215874]

# üì¶ –ú–∞“≥—Å—É–ª–æ—Ç
ITEMS = {
    1: {"name": "60 UC", "price": 10},
    2: {"name": "325 UC", "price": 50},
    3: {"name": "660 UC", "price": 100},
    4: {"name": "1800 UC", "price": 250},
    5: {"name": "3850 UC", "price": 500},
    6: {"name": "8100 UC", "price": 1000},
}

# üìÅ –ú–∞—ä–ª—É–º–æ—Ç–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω –¥–∞—Ä —Ñ–∞–π–ª —Å–∞–±—Ç –º–µ—à–∞–≤–∞–¥
USERS_FILE = "users.json"

if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)
else:
    users_data = {}

user_carts = {}
user_wishlist = {}
orders = []
user_menu_messages = {}

# ---------- –Å—Ä–¥–∞–º—á”£ ----------
async def send_typing(chat, text):
    await chat.send_action("typing")
    await asyncio.sleep(0.3)
    await chat.send_message(text)

def save_users():
    with open(USERS_FILE, "w") as f:
        json.dump(users_data, f, indent=2)

# ---------- –°–∞–±—Ç–∏ –Ω–æ–º ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = str(user.id)

    # –ê–≥–∞—Ä –∞–ª–ª–∞–∫–∞–π —Å–∞–±—Ç —à—É–¥–∞ –±–æ—à–∞–¥ ‚Üí –º–µ–Ω—é—Ä–æ –Ω–∏—à–æ–Ω –¥–∏“≥
    if user_id in users_data:
        chat = update.message.chat
        await send_typing(chat, f"üëã –°–∞–ª–æ–º, {user.first_name}! –ë–æ–∑ —Ö–∞–π—Ä–∞–º–∞“õ–¥–∞–º!")
        await show_main_menu(chat, user.id)
        return

    # –ê–≥–∞—Ä —Å–∞–±—Ç –Ω–∞—à—É–¥–∞ –±–æ—à–∞–¥ ‚Üí —Ç—É–≥–º–∞–∏ —Ä–∞“õ–∞–º —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω
    contact_button = KeyboardButton("üì± –í–æ—Ä–∏–¥ —à—É–¥–∞–Ω –±–æ —Ä–∞“õ–∞–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üîê –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥:",
        reply_markup=reply_markup
    )

# ---------- –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω ----------
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.message.from_user
    user_id = str(user.id)

    users_data[user_id] = {
        "id": user.id,
        "name": user.first_name,
        "username": user.username,
        "phone": contact.phone_number,
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_users()

    # –ë–∞ –∞–¥–º–∏–Ω —Ö–∞–±–∞—Ä –¥–æ–¥–∞–Ω
    for admin in ADMIN_IDS:
        await context.bot.send_message(
            admin,
            f"üë§ –ö–æ—Ä–±–∞—Ä–∏ –Ω–∞–≤ —Å–∞–±—Ç —à—É–¥!\n\n"
            f"üßë –ù–æ–º: {user.first_name}\n"
            f"üì± –†–∞“õ–∞–º: {contact.phone_number}\n"
            f"üîó @{user.username or '–ù–æ–º –Ω–∞–¥–æ—Ä–∞–¥'}"
        )

    await update.message.reply_text(
        "‚úÖ –®—É–º–æ –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –≤–æ—Ä–∏–¥ —à—É–¥–µ–¥!",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update.message.chat, user.id)

# ---------- –ú–µ–Ω—é–∏ –∞—Å–æ—Å”£ ----------
async def show_main_menu(chat, user_id):
    buttons = [
        [
            InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog"),
            InlineKeyboardButton("‚ù§Ô∏è –î–∏–ª—Ö–æ“≥“≥–æ", callback_data="open_wishlist"),
        ],
        [
            InlineKeyboardButton("üõí –°–∞–±–∞–¥", callback_data="open_cart"),
            InlineKeyboardButton("üí¨ –ü—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω", url="tg://user?id=8377215874"),
        ],
        [InlineKeyboardButton("‚Ñπ –ú–∞—ä–ª—É–º–æ—Ç", callback_data="info")],
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")])

    msg = await chat.send_message(
        "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
        reply_markup=InlineKeyboardMarkup(buttons),
        disable_notification=True
    )
    user_menu_messages[user_id] = msg

# ---------- Callback –∫–Ω–æ–ø–∫–∞“≥–æ ----------
async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "open_catalog":
        await catalog(query)
    elif data == "open_cart":
        await cart(query)
    elif data == "open_wishlist":
        await open_wishlist(query)
    elif data == "checkout":
        await checkout(query, context)
    elif data == "clear_cart":
        user_carts[user_id] = {}
        await query.message.reply_text("üßπ –°–∞–±–∞–¥ —Ç–æ–∑–∞ —à—É–¥!")
    elif data == "info":
        await query.message.reply_text("‚Ñπ Jazz Store ‚Äî –º–∞“ì–æ–∑–∞–∏ —Ä–∞—Å–º–∏–∏ Jazz üé∑")
    elif data == "admin_panel":
        await admin_panel(query)
    elif data == "admin_users":
        await show_all_users(query)
    elif data == "back_main":
        await show_main_menu(query.message.chat, user_id)

# ---------- –ö–∞—Ç–∞–ª–æ–≥ ----------
async def catalog(query):
    buttons = [
        [InlineKeyboardButton("60 UC ‚Äî 10 TJS", callback_data="add_1"),
         InlineKeyboardButton("325 UC ‚Äî 50 TJS", callback_data="add_2")],
        [InlineKeyboardButton("660 UC ‚Äî 100 TJS", callback_data="add_3"),
         InlineKeyboardButton("1800 UC ‚Äî 250 TJS", callback_data="add_4")],
        [InlineKeyboardButton("3850 UC ‚Äî 500 TJS", callback_data="add_5"),
         InlineKeyboardButton("8100 UC ‚Äî 1000 TJS", callback_data="add_6")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text("üõç –ö–∞—Ç–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –°–∞–±–∞–¥ ----------
async def cart(query):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return
    text = "üõç –ú–∞“≥—Å—É–ª–æ—Ç–∏ —à—É–º–æ:\n"
    total = 0
    for i, qty in cart.items():
        subtotal = ITEMS[i]["price"] * qty
        total += subtotal
        text += f"- {ITEMS[i]['name']} x{qty} = {subtotal} TJS\n"
    text += f"\nüí∞ “≤–∞–º–∞–≥”£: {total} TJS"
    buttons = [
        [InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à –¥–æ–¥–∞–Ω", callback_data="checkout"),
         InlineKeyboardButton("üóëÔ∏è –ü–æ–∫ –∫–∞—Ä–¥–∞–Ω", callback_data="clear_cart")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –§–∞—Ä–º–æ–∏—à ----------
async def checkout(query, context):
    user = query.from_user
    user_id = user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return

    total = sum(ITEMS[i]["price"] * q for i, q in cart.items())
    order_id = random.randint(10000, 99999)
    order_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    orders.append({"id": order_id, "user": user.username, "total": total, "time": order_time})
    for admin in ADMIN_IDS:
        await context.bot.send_message(
            admin, f"üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤ ‚Ññ{order_id} –∞–∑ @{user.username}\nüí∞ {total} TJS"
        )
    await query.message.reply_text(f"‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ ‚Ññ{order_id} “õ–∞–±—É–ª —à—É–¥!")
    user_carts[user_id] = {}

# ---------- –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω ----------
async def admin_panel(query):
    buttons = [
        [InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à“≥–æ", callback_data="admin_orders"),
         InlineKeyboardButton("üìã –†”Ø–π—Ö–∞—Ç–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω", callback_data="admin_users")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –ù–∞–º–æ–∏—à–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω ----------
async def show_all_users(query):
    if not users_data:
        await query.message.reply_text("üö´ “≤–æ–ª–æ —è–≥–æ–Ω –∫–æ—Ä–±–∞—Ä –Ω–µ—Å—Ç.")
        return
    text = "üìã **–†”Ø–π—Ö–∞—Ç–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω:**\n\n"
    for u in users_data.values():
        text += f"üë§ {u['name']} ‚Äî {u['phone']}\n"
    await query.message.reply_text(text)

# ---------- –ë–æ—Ç—Ä–æ –æ“ì–æ–∑ –∫–∞—Ä–¥–∞–Ω ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(buttons))
    app.add_handler(MessageHandler(filters.CONTACT, get_contact))
    print("‚úÖ Jazz Store –±–æ —Å–∞–±—Ç–∏ —Ä–∞“õ–∞–º —Ñ–∞—ä–æ–ª —à—É–¥!")
    app.run_polling()

if __name__ == "__main__":
    main()