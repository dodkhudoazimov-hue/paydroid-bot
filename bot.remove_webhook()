from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes

# “≤–æ–ª–∞—Ç–∏ –±–æ–∑”£ –±–∞—Ä–æ–∏ “≥–∞—Ä chat
games = {}

# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ —Å–æ—Ö—Ç–∞–Ω–∏ “∑–∞–¥–≤–∞–ª
def create_board(size):
    return [[" " for _ in range(size)] for _ in range(size)]

# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –Ω–∞–º–æ–∏—à–∏ “∑–∞–¥–≤–∞–ª –±–æ emoji
def render_board(board):
    symbol_map = {"X": "‚ùå", "O": "‚≠ï", " ": "‚¨ú"}
    return "\n".join("".join(symbol_map[cell] for cell in row) for row in board)

# –§—É–Ω–∫—Å–∏—è–∏ —Ç—É–≥–º–∞“≥–æ–∏ “∑–∞–¥–≤–∞–ª
def board_buttons(board, chat_id):
    buttons = []
    for i, row in enumerate(board):
        btn_row = []
        for j, cell in enumerate(row):
            if cell == " ":
                btn_row.append(InlineKeyboardButton("‚¨ú", callback_data=f"{chat_id}:{i},{j}"))
            else:
                btn_row.append(InlineKeyboardButton(cell, callback_data="ignored"))
        buttons.append(btn_row)
    return InlineKeyboardMarkup(buttons)

# –¢—É–≥–º–∞–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω
def admin_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω", url="tg://user?id=8377215874")]])

# –¢—É–≥–º–∞–∏ "–ò–ª–æ–≤–∞ –±–∞ –≥—É—Ä”Ø“≥" (–∫–æ—Ä–±–∞—Ä –∏–Ω—Ç–∏—Ö–æ–± –º–µ–∫—É–Ω–∞–¥)
def add_group_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ò–ª–æ–≤–∞ –±–∞ –≥—É—Ä”Ø“≥", url="https://t.me/YourBotUsername?startgroup=true")]
    ])

# –¢–∞—Ñ—Ç–∏—à–∏ –±—É—Ä–¥
def check_win(board, player):
    size = len(board)
    # –°–∞—Ç—Ä—É —Å—É—Ç—É–Ω
    for i in range(size):
        if all(board[i][j] == player for j in range(size)) or all(board[j][i] == player for j in range(size)):
            return True
    # –î–∏–∞–≥–æ–Ω–∞–ª
    if all(board[i][i] == player for i in range(size)) or all(board[i][size-1-i] == player for i in range(size)):
        return True
    return False

# –û“ì–æ–∑–∏ –±–æ–∑”£ –±–æ –∏–Ω—Ç–∏—Ö–æ–±–∏ —Ä–∞–∑–º–µ—Ä
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("3x3", callback_data="size:3")],
        [InlineKeyboardButton("4x4", callback_data="size:4")],
        [InlineKeyboardButton("5x5", callback_data="size:5")],
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω", url="tg://user?id=8377215874")],
        [InlineKeyboardButton("–ò–ª–æ–≤–∞ –±–∞ –≥—É—Ä”Ø“≥", url="https://t.me/YourBotUsername?startgroup=true")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–∞–ª–æ–º! –†–∞–∑–º–µ—Ä–∏ –±–æ–∑–∏—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=reply_markup)

# –û“ì–æ–∑–∏ –±–æ–∑”£ –ø–∞—Å –∞–∑ –∏–Ω—Ç–∏—Ö–æ–±
async def select_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("size:"):
        return
    size = int(data.split(":")[1])
    chat_id = query.message.chat.id
    board = create_board(size)
    games[chat_id] = {"board": board, "turn": "X"}
    await query.edit_message_text(f"–ë–æ–∑”£ –æ“ì–æ–∑ —à—É–¥! –†–∞–∑–º–µ—Ä: {size}x{size}\n–ù–∞–≤–±–∞—Ç–∏ ‚ùå",
                                  reply_markup=board_buttons(board, chat_id))

# Callback –±–∞—Ä–æ–∏ “≥–∞—Ä–∞–∫–∞—Ç“≥–æ
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "ignored":
        return
    if data.startswith("size:"):
        await select_size(update, context)
        return

    chat_id_str, pos = data.split(":")
    chat_id = int(chat_id_str)
    i, j = map(int, pos.split(","))

    game = games.get(chat_id)
    if not game:
        await query.edit_message_text("–ë–æ–∑”£ —ë—Ñ—Ç –Ω–∞—à—É–¥. /start –±–æ–∑”£ –∫—É–Ω–µ–¥.")
        return

    board = game["board"]
    turn = game["turn"]
    if board[i][j] != " ":
        return

    board[i][j] = turn

    # –¢–∞—Ñ—Ç–∏—à–∏ –±—É—Ä–¥
    if check_win(board, turn):
        await query.edit_message_text(
            f"{render_board(board)}\n{turn} –±—É—Ä–¥! üéâ",
            reply_markup=admin_button()
        )
        del games[chat_id]
        return

    # –¢–∞—Ñ—Ç–∏—à–∏ –±–∞—Ä–æ–±–∞—Ä”£
    if all(cell != " " for row in board for cell in row):
        await query.edit_message_text(f"{render_board(board)}\n–ù–∞—Ç–æ–∏“∑–∞ –±–∞—Ä–æ–±–∞—Ä! ü§ù",
                                      reply_markup=admin_button())
        del games[chat_id]
        return

    # –ù–∞–≤–±–∞—Ç
    game["turn"] = "O" if turn == "X" else "X"
    await query.edit_message_text(f"{render_board(board)}\n–ù–∞–≤–±–∞—Ç–∏ {game['turn']}",
                                  reply_markup=board_buttons(board, chat_id))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    TOKEN = "8238563485:AAHNLTZodPeXcl7YfjZqIqY6BpcPuP3QGXs"
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    print("–ë–æ—Ç –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥...")
    app.run_polling()
