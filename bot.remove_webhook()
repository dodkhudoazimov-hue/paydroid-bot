from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes

# “≤–æ–ª–∞—Ç–∏ –±–æ–∑”£ –±–∞—Ä–æ–∏ “≥–∞—Ä chat
games = {}

# –°–æ—Ö—Ç–∞–Ω–∏ “∑–∞–¥–≤–∞–ª
def create_board(size):
    return [[" " for _ in range(size)] for _ in range(size)]

# –ù–∞–º–æ–∏—à–∏ “∑–∞–¥–≤–∞–ª –±–æ emoji
def render_board(board):
    symbol_map = {"X": "‚ùå", "O": "‚≠ï", " ": "‚¨ú"}
    return "\n".join("".join(symbol_map[cell] for cell in row) for row in board)

# –¢—É–≥–º–∞“≥–æ–∏ inline –±–∞—Ä–æ–∏ “∑–∞–¥–≤–∞–ª
def board_buttons(board, chat_id):
    buttons = []
    for i, row in enumerate(board):
        btn_row = []
        for j, cell in enumerate(row):
            if cell == " ":
                btn_row.append(InlineKeyboardButton("‚¨ú", callback_data=f"{chat_id}:{i},{j}"))
            else:
                btn_row.append(InlineKeyboardButton(cell, callback_data="ignored"))
        buttons.append(btn_row)
    return InlineKeyboardMarkup(buttons)

# –¢—É–≥–º–∞–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω
def admin_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω", url="tg://user?id=8377215874")]])

# –¢–∞—Ñ—Ç–∏—à–∏ –±—É—Ä–¥
def check_win(board, player):
    size = len(board)
    for i in range(size):
        if all(board[i][j] == player for j in range(size)) or all(board[j][i] == player for j in range(size)):
            return True
    if all(board[i][i] == player for i in range(size)) or all(board[i][size-1-i] == player for i in range(size)):
        return True
    return False

# –û“ì–æ–∑–∏ –±–æ–∑”£
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    msg = await update.message.reply_text(
        "–ë–æ–∑”£ –æ“ì–æ–∑ —à—É–¥! –î—É –±–æ–∑–∏–Ω–≥–∞—Ä –ª–æ–∑–∏–º –∞—Å—Ç. –î–∞—Ä “∑–∞–≤–æ–± –Ω–∞–≤–±–∞—Ç–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ (X –≤–∞ O)."
    )
    # “≤–æ–ª–∞—Ç–∏ –∞–≤–≤–∞–ª, “≥–µ“∑ –±–æ–∑–∏–Ω–≥–∞—Ä –º—É–∞–π—è–Ω –Ω–∞—à—É–¥–∞–∞—Å—Ç
    games[chat_id] = {
        "board": create_board(3),
        "turn": "X",
        "players": {},  # user_id: symbol
        "message_id": msg.message_id
    }

# Callback –±–∞—Ä–æ–∏ click
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "ignored":
        return

    chat_id_str, pos = data.split(":")
    chat_id = int(chat_id_str)
    i, j = map(int, pos.split(","))

    game = games.get(chat_id)
    if not game:
        await query.edit_message_text("–ë–æ–∑”£ —ë—Ñ—Ç –Ω–∞—à—É–¥. /game –±–æ–∑”£ –∫—É–Ω–µ–¥.")
        return

    user_id = query.from_user.id
    # –¢–∞—ä–∏–Ω–∏ –±–æ–∑–∏–Ω–≥–∞—Ä
    if user_id not in game["players"]:
        if len(game["players"]) >= 2:
            await query.answer("–ë–æ–∑”£ –±–∞—Ä–æ–∏ –¥—É –±–æ–∑–∏–Ω–≥–∞—Ä –∞—Å—Ç!")
            return
        # –ê–≤–≤–∞–ª–∏–Ω —à–∞—Ö—Å X, –¥—É—é–º O
        symbol = "X" if "X" not in game["players"].values() else "O"
        game["players"][user_id] = symbol

    # –ù–∞–≤–±–∞—Ç–∏ –¥—É—Ä—É—Å—Ç
    if game["players"][user_id] != game["turn"]:
        await query.answer("–ù–∞–≤–±–∞—Ç–∏ —à—É–º–æ –Ω–µ—Å—Ç!")
        return

    board = game["board"]
    turn = game["turn"]

    if board[i][j] != " ":
        return

    board[i][j] = turn

    # –¢–∞—Ñ—Ç–∏—à–∏ –±—É—Ä–¥
    if check_win(board, turn):
        await query.edit_message_text(
            f"{render_board(board)}\n{turn} –±—É—Ä–¥! üéâ",
            reply_markup=admin_button()
        )
        del games[chat_id]
        return

    # –¢–∞—Ñ—Ç–∏—à–∏ –±–∞—Ä–æ–±–∞—Ä”£
    if all(cell != " " for row in board for cell in row):
        await query.edit_message_text(f"{render_board(board)}\n–ù–∞—Ç–æ–∏“∑–∞ –±–∞—Ä–æ–±–∞—Ä! ü§ù",
                                      reply_markup=admin_button())
        del games[chat_id]
        return

    # –ù–∞–≤–±–∞—Ç
    game["turn"] = "O" if turn == "X" else "X"
    await query.edit_message_text(f"{render_board(board)}\n–ù–∞–≤–±–∞—Ç–∏ {game['turn']}",
                                  reply_markup=board_buttons(board, chat_id))

# –ö–æ–º–∞–Ω–¥–∞ –±–∞—Ä–æ–∏ –æ“ì–æ–∑
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–∞–ª–æ–º! /game –±–∞—Ä–æ–∏ –æ“ì–æ–∑ –∫–∞—Ä–¥–∞–Ω–∏ –±–æ–∑”£ –¥–∞—Ä –≥—É—Ä—É“≥"
    )

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    TOKEN = "8238563485:AAHNLTZodPeXcl7YfjZqIqY6BpcPuP3QGXs"
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("game", start_game))
    app.add_handler(CallbackQueryHandler(button_click))
    print("–ë–æ—Ç –∫–æ—Ä –º–µ–∫—É–Ω–∞–¥...")
    app.run_polling()
