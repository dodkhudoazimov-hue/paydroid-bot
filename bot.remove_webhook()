from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio, random, datetime

# üîí TOKEN-–∏ —Ö—É–¥—Ä–æ –≥—É–∑–æ—Ä–µ–¥
TOKEN = "8238563485:AAHNLTZodPeXcl7YfjZqIqY6BpcPuP3QGXs"

# üëë ID-–∏ –∞–¥–º–∏–Ω
ADMIN_IDS = [8377215874]

# üì¶ –ú–∞“≥—Å—É–ª–æ—Ç
ITEMS = {
    1: {"name": "60 UC", "price": 10},
    2: {"name": "325 UC", "price": 50},
    3: {"name": "660 UC", "price": 100},
    4: {"name": "1800 UC", "price": 250},
    5: {"name": "3850 UC", "price": 500},
    6: {"name": "8100 UC", "price": 1000},
}

user_carts = {}
user_wishlist = {}
orders = []
all_users = set()
user_menu_messages = {}  # –ë–∞—Ä–æ–∏ –Ω–∏–≥–æ“≥ –¥–æ—à—Ç–∞–Ω–∏ –º–µ–Ω—é–∏ –¥–æ–∏–º”£

# ---------- –Å—Ä–¥–∞–º—á”£ ----------
async def send_typing(chat, text):
    await chat.send_action("typing")
    await asyncio.sleep(0.5)
    await chat.send_message(text)

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    all_users.add(user_id)
    chat = update.message.chat
    await send_typing(chat, "üé∂ –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ Jazz Store!")
    await show_main_menu(chat, user_id)

# ---------- –ú–µ–Ω—é–∏ –∞—Å–æ—Å”£ ----------
async def show_main_menu(chat, user_id):
    buttons = [
        [
            InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog"),
            InlineKeyboardButton("‚ù§Ô∏è –î–∏–ª—Ö–æ“≥“≥–æ", callback_data="open_wishlist"),
        ],
        [
            InlineKeyboardButton("üõí –°–∞–±–∞–¥", callback_data="open_cart"),
            InlineKeyboardButton("üí¨ –ü—Ä–æ—Ñ–∏–ª–∏ –∞–¥–º–∏–Ω", url="tg://user?id=8377215874"),
        ],
        [InlineKeyboardButton("‚Ñπ –ú–∞—ä–ª—É–º–æ—Ç", callback_data="info")],
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω", callback_data="admin_panel")])

    msg = await chat.send_message(
        "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
        reply_markup=InlineKeyboardMarkup(buttons),
        disable_notification=True
    )
    user_menu_messages[user_id] = msg  # –ù–∏—à–æ–Ω–∏ –º–µ–Ω—é–∏ –¥–æ–∏–º”£

# ---------- Callback –∫–Ω–æ–ø–∫–∞“≥–æ ----------
async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "open_catalog":
        await catalog(query, context)
    elif query.data.startswith("add_"):
        await add_item(query, context)
    elif query.data.startswith("wish_"):
        await add_wishlist(query, context)
    elif query.data == "open_wishlist":
        await open_wishlist(query, context)
    elif query.data == "open_cart":
        await cart(query, context)
    elif query.data == "clear_cart":
        await clear_cart(query, context)
    elif query.data == "checkout":
        await checkout(query, context)
    elif query.data == "info":
        await query.message.reply_text("‚Ñπ Jazz Store ‚Äî –º–∞“ì–æ–∑–∞–∏ —Ä–∞—Å–º–∏–∏ Jazz üé∑")
    elif query.data == "admin_panel":
        await admin_panel(query, context)
    elif query.data == "admin_orders":
        if not orders:
            await query.message.reply_text("üì¶ “≤–æ–ª–æ —è–≥–æ–Ω —Ñ–∞—Ä–º–æ–∏—à –Ω–µ—Å—Ç.")
        else:
            text = "üì¶ –§–∞—Ä–º–æ–∏—à“≥–æ:\n\n"
            for o in orders:
                text += f"‚Ññ{o['id']} - @{o['user']} - ${o['total']} - {o['time']}\n"
            await query.message.reply_text(text)
    elif query.data == "admin_stats":
        await query.message.reply_text(f"üìä –ö–æ—Ä–±–∞—Ä–æ–Ω: {len(all_users)}\nüõç –§–∞—Ä–º–æ–∏—à“≥–æ: {len(orders)}")
    elif query.data == "admin_clear":
        orders.clear()
        await query.message.reply_text("üßπ “≤–∞–º–∞–∏ —Ñ–∞—Ä–º–æ–∏—à“≥–æ –ø–æ–∫ —à—É–¥–∞–Ω–¥.")
    elif query.data == "admin_broadcast":
        await query.message.reply_text("üì¢ –ü–∞—ë–º–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –±–∞ “≥–∞–º–∞ –∫–æ—Ä–±–∞—Ä–æ–Ω:")
        context.user_data["broadcast_mode"] = True
    elif query.data == "back_main":
        await back_to_main(user_id)

# ---------- Catalog ----------
async def catalog(query, context):
    buttons = [
        [
            InlineKeyboardButton("60 UC ‚Äî 10 TJS", callback_data="select_1"),
            InlineKeyboardButton("325 UC ‚Äî 50 TJS", callback_data="select_2"),
        ],
        [
            InlineKeyboardButton("660 UC ‚Äî 100 TJS", callback_data="select_3"),
            InlineKeyboardButton("1800 UC ‚Äî 250 TJS", callback_data="select_4"),
        ],
        [
            InlineKeyboardButton("3850 UC ‚Äî 500 TJS", callback_data="select_5"),
            InlineKeyboardButton("8100 UC ‚Äî 1000 TJS", callback_data="select_6"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text("üõç –ö–∞—Ç–∞–ª–æ–≥–∏ UC:\n–ù–∞—Ä—Ö“≥–æ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ üëá",
                                  reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Select Item ----------
async def add_item(query, context):
    item_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    user_carts.setdefault(user_id, {})
    user_carts[user_id][item_id] = user_carts[user_id].get(item_id, 0) + 1
    await query.message.reply_text(f"‚úÖ {ITEMS[item_id]['name']} –±–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ —à—É–¥!")

async def add_wishlist(query, context):
    item_id = int(query.data.split("_")[1])
    user_id = query.from_user.id
    user_wishlist.setdefault(user_id, set()).add(item_id)
    await query.message.reply_text(f"üíñ {ITEMS[item_id]['name']} –±–∞ —Ä”Ø–π—Ö–∞—Ç–∏ –¥–∏–ª—Ö–æ“≥“≥–æ –∏–ª–æ–≤–∞ —à—É–¥!")

# ---------- –°–∞–±–∞–¥ ----------
async def cart(query, context):
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return
    text = "üõç –ú–∞“≥—Å—É–ª–æ—Ç–∏ —à—É–º–æ:\n"
    total = 0
    for item_id, qty in cart.items():
        subtotal = ITEMS[item_id]["price"] * qty
        total += subtotal
        text += f"- {ITEMS[item_id]['name']} x{qty} = ${subtotal}\n"
    text += f"\nüí∞ “≤–∞–º–∞–≥”£: ${total}"
    buttons = [
        [
            InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à –¥–æ–¥–∞–Ω", callback_data="checkout"),
            InlineKeyboardButton("üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω", callback_data="clear_cart"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Wishlist ----------
async def open_wishlist(query, context):
    user_id = query.from_user.id
    items = user_wishlist.get(user_id, set())
    if not items:
        await query.message.reply_text("‚ù§Ô∏è –†”Ø–π—Ö–∞—Ç–∏ –¥–∏–ª—Ö–æ“≥“≥–æ —Ö–æ–ª–∏—Å—Ç.")
        return
    text = "‚ù§Ô∏è –ú–∞“≥—Å—É–ª–æ—Ç–∏ –¥”Ø—Å—Ç–¥–æ—à—Ç–∞:\n"
    for i in items:
        text += f"- {ITEMS[i]['name']} (${ITEMS[i]['price']})\n"
    buttons = [[
        InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main"),
        InlineKeyboardButton("üõí –ë–∞ —Å–∞–±–∞–¥", callback_data="open_cart"),
    ]]
    await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Checkout ----------
async def checkout(query, context):
    user = query.from_user
    user_id = user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await query.message.reply_text("üõí –°–∞–±–∞–¥ —Ö–æ–ª–∏—Å—Ç.")
        return
    total = sum(ITEMS[i]["price"] * q for i, q in cart.items())
    order_id = random.randint(10000, 99999)
    order_data = {
        "id": order_id,
        "user": user.username or user.first_name,
        "total": total,
        "items": cart,
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    }
    orders.append(order_data)
    for admin in ADMIN_IDS:
        await context.bot.send_message(admin, f"üì¶ –§–∞—Ä–º–æ–∏—à–∏ –Ω–∞–≤ ‚Ññ{order_id} –∞–∑ @{order_data['user']}\nüí∞ ${total}")
    await query.message.reply_text(f"‚úÖ –§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ ‚Ññ{order_id} “õ–∞–±—É–ª —à—É–¥! üôå")
    user_carts[user_id] = {}

# ---------- Clear Cart ----------
async def clear_cart(query, context):
    user_id = query.from_user.id
    user_carts[user_id] = {}
    await query.message.reply_text("üßπ –°–∞–±–∞–¥ —Ç–æ–∑–∞ —à—É–¥!")

# ---------- Admin Panel ----------
async def admin_panel(query, context):
    buttons = [
        [
            InlineKeyboardButton("üì¶ –§–∞—Ä–º–æ–∏—à“≥–æ", callback_data="admin_orders"),
            InlineKeyboardButton("üìä –û–º–æ—Ä–∏ —É–º—É–º”£", callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton("üì® –ü–∞—ë–º –±–∞ “≥–∞–º–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton("üßπ –ü–æ–∫—Å–æ–∑”£", callback_data="admin_clear"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_main")],
    ]
    await query.message.edit_text("üëë –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:", reply_markup=InlineKeyboardMarkup(buttons))

# ---------- Back to Main ----------
async def back_to_main(user_id):
    if user_id in user_menu_messages:
        await user_menu_messages[user_id].edit_text(
            "–ú–µ–Ω—é–∏ –∞—Å–æ—Å”£:",
            reply_markup=user_menu_messages[user_id].reply_markup
        )

# ---------- Broadcast ----------
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    if user_id in ADMIN_IDS and context.user_data.get("broadcast_mode"):
        count = 0
        for u in all_users:
            try:
                await context.bot.send_message(u, f"üì¢ –ü–∞—ë–º–∏ –∞–¥–º–∏–Ω:\n{text}")
                count += 1
            except:
                pass
        context.user_data["broadcast_mode"] = False
        await update.message.reply_text(f"‚úÖ –ü–∞—ë–º –±–∞ {count} –∫–æ—Ä–±–∞—Ä —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.")

# ---------- –ö–æ–º–∞–Ω–¥“≥–æ ----------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üõç **Jazz Store ‚Äì –î–∞—Å—Ç—É—Ä**\n\n"
        "/catalog ‚Äì –¥–∏–¥–∞–Ω–∏ –º–∞“≥—Å—É–ª–æ—Ç\n"
        "/cart ‚Äì —Å–∞–±–∞–¥–∏ —à—É–º–æ\n"
        "/wishlist ‚Äì –¥–∏–ª—Ö–æ“≥“≥–æ–∏ —à—É–º–æ\n"
        "/info ‚Äì –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ –º–∞“ì–æ–∑–∞\n"
        "/contact ‚Äì –±–æ –∞–¥–º–∏–Ω —Ç–∞–º–æ—Å –≥–∏—Ä–∏—Ñ—Ç–∞–Ω\n"
        "/admin ‚Äì –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω“≥–æ\n"
    )
    await update.message.reply_text(text)

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fake_query = type("Q", (), {"message": update.message, "from_user": update.message.from_user, "data": "open_catalog", "answer": lambda: None})()
    await catalog(fake_query, context)

async def cart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fake_query = type("Q", (), {"message": update.message, "from_user": update.message.from_user, "data": "open_cart", "answer": lambda: None})()
    await cart(fake_query, context)

async def wishlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fake_query = type("Q", (), {"message": update.message, "from_user": update.message.from_user, "data": "open_wishlist", "answer": lambda: None})()
    await open_wishlist(fake_query, context)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚Ñπ Jazz Store ‚Äî –º–∞“ì–æ–∑–∞–∏ —Ä–∞—Å–º–∏–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –±—Ä–µ–Ω–¥–∏–∏ Jazz üé∑")

async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí¨ –ë–∞—Ä–æ–∏ —Å–∞–≤–æ–ª“≥–æ –≤–∞ —Ñ–∞—Ä–º–æ–∏—à“≥–æ –Ω–∞–≤–∏—Å–µ–¥ –±–∞ @Admin")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id in ADMIN_IDS:
        fake_query = type("Q", (), {"message": update.message, "from_user": update.message.from_user, "data": "admin_panel", "answer": lambda: None})()
        await admin_panel(fake_query, context)
    else:
        await update.message.reply_text("üö´ –ò–Ω —Ñ–∞—Ä–º–æ–Ω —Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ –∞–¥–º–∏–Ω –∞—Å—Ç.")

# ---------- –°–æ—Ö—Ç–∞–Ω–∏ –±–æ—Ç ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("catalog", catalog_command))
    app.add_handler(CommandHandler("cart", cart_command))
    app.add_handler(CommandHandler("wishlist", wishlist_command))
    app.add_handler(CommandHandler("info", info_command))
    app.add_handler(CommandHandler("contact", contact_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CallbackQueryHandler(buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay))
    print("‚úÖ Jazz Store –ø—É—Ä—Ä–∞ —Ñ–∞—ä–æ–ª —à—É–¥!")
    app.run_polling()

if __name__ == "__main__":
    main()